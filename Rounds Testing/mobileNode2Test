/* 
 *  File        : mobileNode2Test.ino
 *  Description : Implements the R.I.D.E localization algorithm. 
 *                Upload to mobile node 2
 *  Author      : Edgar Gomez, Tim Coulter
 *  Date        : 4 April 2017
 *  Version     : 2.0
 */
 

//********** Library Includes **********//

#include <EasyTransfer.h>
#include <TinyGPS++.h>
#include <SD.h>

//********** Object Instantiation **********//

EasyTransfer ETin, ETout; 
TinyGPSPlus gps;
File dataFile;

struct RECEIVE_DATA_STRUCTURE{
  //put your variable definitions here for the data you want to receive
  //THIS MUST BE EXACTLY THE SAME ON THE OTHER ARDUINO
  int nodeID;
  double latErr;
  double lngErr;
};

struct SEND_DATA_STRUCTURE{
  //put your variable definitions here for the data you want to receive
  //THIS MUST BE EXACTLY THE SAME ON THE OTHER ARDUINO
  int nodeID = 2;
  double latErr = 0;
  double lngErr = 0;
};

//give a name to the group of data
RECEIVE_DATA_STRUCTURE rxdata;
SEND_DATA_STRUCTURE txdata;

//********** Variable Declaration **********//

bool RSU = false;
bool MN1 = false;
       
int CS_PIN = 53;
int F = 0;
int i = 0;
int n_ii = 2;
int gpsPin = 19;
int roundNumber = 0;

double x_gpsLat, x_gpsLng;
double gpsLat, gpsLng;
double x_estLat, x_estLng;
double neighLatError[2], neighLngError[2];
double myLatError,myLngError;

void setup(){
  Serial.begin(9600);
  Serial1.begin(9600);
  delay(1000);
  
  //start the library, pass in the data details and the name of the serial port.
  ETin.begin(details(rxdata), &Serial);
  ETout.begin(details(txdata), &Serial);
  
  initializeSD();
}

void loop(){
  while (Serial1.available () > 0) {
    if (gps.encode(Serial1.read() )) {
      if(roundNumber == 0){
        x_estLat = gps.location.lat();
        x_estLng = gps.location.lng();
        x_gpsLat = x_estLat;
        x_gpsLng = x_estLng;
      
        dataFile = SD.open("test.txt", FILE_WRITE);
        dataFile.print(x_estLat,6);
        dataFile.print(",");
        dataFile.print(x_estLng,6);
        dataFile.print(",");
        dataFile.println(roundNumber);
        dataFile.close();
      
        roundNumber++; 
        ETout.sendData();
      }
      else{
        x_gpsLat = gps.location.lat();
        x_gpsLng = gps.location.lng();
      }
    }
  }
  if (!RSU || !MN1){
    if(ETin.receiveData()){
      switch(rxdata.nodeID){
        case 1:
          MN2 = true;
          neighLatError[0] = (x_gpsLat - x_estLat) - rxdata.latErr;
          neighLngError[0] = (x_gpsLng - x_estLng) - rxdata.lngErr;
          break;
        case 5:
          RSU = true;
          neighLatError[1] = (x_gpsLat - x_estLat) - rxdata.latErr;
          neighLngError[1] = (x_gpsLng - x_estLng) - rxdata.lngErr;
          break;
      }
    }
  }
  if(RSU && MN1){
    x_estLat = positionEstimateUpdate(x_estLat, neighLatError, n_ii, F, "LAT");
    x_estLng = positionEstimateUpdate(x_estLng, neighLngError, n_ii, F,"");

    txdata.latErr = x_gpsLat - x_estLat;
    txdata.lngErr = x_gpsLng - x_estLng;
    
    dataFile = SD.open("test.txt", FILE_WRITE);
    dataFile.print(x_estLat,6);
    dataFile.print(",");
    dataFile.print(x_estLng,6);
    dataFile.print(",");
    dataFile.println(roundNumber);
    dataFile.close(); // I had to add this or else the data would not get wrote to the SD card. It would create the file but not write anything. Once I closed the file it started working properly

    RSU = false;
    MN1 = false;
      
    roundNumber++;
    ETout.sendData();
  }
}


/**
 * Compare function to be used by quicksort to arrange elements
 * in ascending order.
 */
int qsortCompare(const void * arg1, const void * arg2) {
  double * a = (double *)arg1;  // cast to pointers to doubles
  double * b = (double *)arg2;

  // a less than b? 
  if (*a < *b)
    return -1;

  // a greater than b?
  if (*a > *b)
    return 1;

  // must be equal
  return 0;
}

double positionEstimateUpdate(double x_prev, double* diff_error_set, int n_ii, int F, String type) {

  // Initialize Local Variables
  int uprcount, lwrcount;
  
  // Sort error_set by Relative Bias and Estimated Relative Bias 
  qsort(&diff_error_set[2], n_ii, sizeof(double), qsortCompare);
  
  double *srtd_neigh = diff_error_set;
  double x_new;

  //If Number of neighbors is greater than Redundency Parameter
  if (n_ii>F) {
    // Remove values smaller than 0 in the F smallest values
    int lwrcount = 0;
    while (lwrcount<F && srtd_neigh[lwrcount]<0)
      lwrcount = lwrcount + 1;
      
    // Remove values larger than 0 in the F largest values
    int uprcount = n_ii;
    while (uprcount > n_ii - F && srtd_neigh[uprcount] > 0) {
      uprcount = uprcount - 1;
    }

    // Dynamically Allocate Memory for kept_neigh Array
    int kept_neigh_size = uprcount - lwrcount;
    double* kept_neigh = 0;
    
    kept_neigh = new double[kept_neigh_size];



    // Remove up to 2F lowest and 2F highest gps error estimates 
    for (int i = 0; i < kept_neigh_size; i++)
      kept_neigh[i] = srtd_neigh[i + lwrcount];
      
    
    // Calculate number of kept neighbors
    int num_kept = uprcount - lwrcount;

    // Calculate Weight to Use in Update (m_k)
    double m_k = 1.0 / (num_kept + 1);

    // Calculate Sum of Pseudo Errors 
    double sumPseudoErrors = 0;
    for (int i = 0; i<num_kept; i++)
      sumPseudoErrors += kept_neigh[i];

    if (type == "LAT") {
      
    // Calculate Leaky-Average of GPS Errors
    myLatError = m_k*sumPseudoErrors;   
     
    // Calculate position estimate (x_new)
    x_new = x_prev - myLatError;
    }
   
   else {
     myLngError = m_k*sumPseudoErrors;  
     x_new = x_prev - myLngError;
   }
  }

  else
    x_new = x_prev;

  return x_new;
}


void initializeSD()
{
  pinMode(10, OUTPUT); // Must declare 10 an output and reserve it to keep SD card happy
  SD.begin(CS_PIN);    // Initialize the SD card reader

 // Make sure the name of the file is small enough 
  if (SD.exists("test.txt")) { // Delete old data files to start fresh
      SD.remove("test.txt");
  }
}
